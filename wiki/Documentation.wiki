#summary Documentation

= Documentation =

 * [Installation]
 * [Documentation#CAscript CAscript]

== CAscript ==

=== Overview ===

CAscript is the master script for running many feature extraction tools on a set of images or a movie. CAscript is consist of the following modules:

  * `ca_prep.py` - This script prepares the project directory
  * `ca_analyze.py` - This script runs a collection of analysis scripts.
  * `ca_project.py` - A wrapper script for processing a project directory
  * `ca_batch.py` - A wrapper script for processing a set of project directory

=== Using CAscript ===

To use CAscript, you can use either *`ca_project.py`* or *`ca_batch.py`*. Usually, *`ca_project.py`* is for a single project directory processing and *`ca_batch.py`* is for multiple project directory processing.

==== Using ca_project.py ====

*`ca_project.py`* is basically a wrapper script that calls *`ca_prep.py`* and *`ca_analyze.py`* sequentially. Here's the usage of *`ca_project.py`*

{{{
USAGE: ca_project [OPTIONS] <project directory>
OPTIONS
	-h,--help          	Show this usage screen.
	--prep_arg ARGS    	ca_prep arguments
	--analyze_arg ARGS 	ca_analyze arguments.
}}}

  
*`<project directory>`* is assumed to have a subdirectory called *`source`* which contains the original data. The original data can be either a movie file or a set of images.

*`prep_arg`* is used to specify the argument to pass on to *`ca_prep.py`*. The most common argument is to have *`ca_prep.py`* downloads a movie file from the internet, *`--url <URL>`*. In this case, we use *`--prep_arg "--url <URL>"`*.

*`analyze_arg`* is used to specify the argument to pass on to *`ca_analyze.py`*. The most common argument is to specify mode of operation i.e. video or images. For example, if we want to do image analysis, we use *`--analyze_arg "--mode images"`*.

Furthermore, you can use a configuration file instead of these command line arguments. More detail in *`config.py`* section.


==== Notes about options ====
 * `--video`: This is useful when your source file is not a movie but a sequence of images. In order to tell *`cascript`* to include video analysid i.e. shot-detection, `--video` is required.
 * `-v`: *`cascript`* is primarily developed to run in batch mode. So, by default, there is very little information being printed on screen. If `-v` is used, then *`cascript`* will print more information on screen.


==== Examples ====

 # Movie from existing file
  * Create a project directory called *`test`*.
  * Create a subdirectory under *`test`* called *`source`*
  * Copy the movie file into *`source`*
  * Run *`cascript test`*
 # Movie from `http://www.test.com/test.avi`
  * Run *`cascript --url http://www.test.com/test.avi test`*. In this case, the script will automatically create project directory called *`test`*.
 # Images
  * Create a project directory called *`test`*.
  * Create a subdirectory under *`test`* called *`source`*
  * Copy the images file into *`source`*
  * Run *`cascript test`*


=== Default parameters for CAscript ===

{{{
samplingRate = 10

default_ffmpeg_args = '-t 300 -sameq'
default_line_args = '--preset high'
default_shot_args = ''
default_color_args = '-q 2'

supportedMovieType = ['mpeg','mpg','avi','mov','m4v','mp4']
supportedImageType = ['jpg','jpeg','png','tif','tiff','bmp']
}}}


== CAbatch ==

=== Using CAbatch ===

CAbatch is a batch wrapper that takes a list of movie file URLs and runs CAscript on each movie file in a separate subdirectory.

CAbatch is called by using command *`cabatch`*.

{{{
USAGE: cabatch <configuration file>
}}}
  
*`<configuration file>`* is a tab-delimited text file with two entries per line. The first entry is a full URL, the second entry is a text string to be used as the subdirectory name where the downloaded file will be processed by cascript.

==== Example Configuration File ====

{{{
http://my.url.com/movie1.mp4	1_Intro
http://my.url.com/movie2.mp4	2_Main
http://my.url.com/movie3.mp4	3_Conclusion
}}}

==== Examples ====

 # Movie list from websites
  * Create a batch project directory called *`batch_test`*.
  * Create a configuration file under * `batch_test`* called *`cabatch.cfg`*
  * Add two URLs and directory titles to *`cabatch.cfg`* as per the example configuration file above
  * Run *`cabatch cabatch.cfg`*
 # Movie list from drive
  * To be supported